// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var Item, ItemView, ListView, TodoList, list_view;
    Item = (function(_super) {

      __extends(Item, _super);

      function Item() {
        return Item.__super__.constructor.apply(this, arguments);
      }

      Item.prototype.defaults = {
        content: 'Default Item',
        date: '2012-1-1',
        editMode: true,
        done: false
      };

      return Item;

    })(Backbone.Model);
    TodoList = (function(_super) {

      __extends(TodoList, _super);

      function TodoList() {
        return TodoList.__super__.constructor.apply(this, arguments);
      }

      TodoList.prototype.model = Item;

      return TodoList;

    })(Backbone.Collection);
    ItemView = (function(_super) {

      __extends(ItemView, _super);

      function ItemView() {
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tagName = 'li';

      ItemView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      ItemView.prototype.render = function() {
        var html, inputBox, text;
        inputBox = "<input type=\"text\" name=\"fname\" value=\"" + (this.model.get('content')) + "\">";
        text = "<span class=\"itemcontent\">" + (this.model.get('content')) + "</span>\n<a href=\"#\" class=\"done\">done</a> ";
        html = this.model.get('editMode') ? inputBox : text;
        $(this.el).html(html);
        if (this.model.get('done')) {
          $(this.el).addClass("done");
        }
        if (this.model.get('editMode')) {
          $(this.el).find("input").focus();
        }
        return this;
      };

      ItemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      ItemView.prototype.remove = function() {
        return this.model.destroy();
      };

      ItemView.prototype.enableEdit = function(e) {
        return this.model.set({
          'editMode': true
        });
      };

      ItemView.prototype.keyPress = function(e) {
        var val;
        if (e.keyCode !== 13) {
          return;
        }
        val = $(e.target).val();
        if (val !== '') {
          return this.model.set({
            'content': val,
            'editMode': false
          });
        }
      };

      ItemView.prototype.markDone = function(e) {
        return this.model.set({
          'done': true
        });
      };

      ItemView.prototype.blur = function(e) {
        var val;
        val = $(e.target).val();
        if (val !== '') {
          return this.model.set({
            'content': val,
            'editMode': false
          });
        }
      };

      ItemView.prototype.events = function() {
        return {
          'click .edit': 'enableEdit',
          'click a.done': 'markDone',
          'keypress input[type=text]': 'keyPress',
          'blur input[type=text]': 'blur',
          'dblclick ': 'enableEdit'
        };
      };

      return ItemView;

    })(Backbone.View);
    ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.el = $('body');

      ListView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new TodoList;
        return this.collection.bind('add', this.renderItem);
      };

      ListView.prototype.addItem = function() {
        var item;
        item = new Item;
        return this.collection.add(item);
      };

      ListView.prototype.renderItem = function(item) {
        var html, item_view;
        item_view = new ItemView({
          model: item
        });
        html = item_view.render().el;
        console.log(html);
        return $("#list>ul").append(html);
      };

      ListView.prototype.events = function() {
        return {
          'click .add': 'addItem'
        };
      };

      return ListView;

    })(Backbone.View);
    return list_view = new ListView;
  });

}).call(this);
